"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _command = _interopRequireDefault(require("@oclif/command"));

var _config = _interopRequireDefault(require("@percy/config"));

var _utils = require("@percy/config/dist/utils");

var _logger = _interopRequireDefault(require("@percy/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// The PercyCommand class that all Percy CLI commands should extend
// from. Provides common #init() and #catch() methods and provides other methods
// for loading configuration and checking if Percy is enabled.
class PercyCommand extends _command.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "log", (0, _logger.default)('cli:command'));
  }

  //  Initialize flags, args, the loglevel, and attach process handlers to allow
  //  commands to seemlessly cleanup on interupt or termination
  init() {
    let {
      args,
      flags
    } = this.parse();

    _logger.default.loglevel('info', flags);

    this.flags = flags;
    this.args = args; // log and map deprecated flags

    for (let f in this.constructor.flags) {
      let {
        deprecated
      } = this.constructor.flags[f];

      if (deprecated && flags[f] != null) {
        if (deprecated === true) deprecated = {};
        let {
          until: ver,
          map,
          alt
        } = deprecated;
        let message = `The --${f} flag ` + [`will be removed in ${ver || 'a future release'}.`, map ? `Use --${map} instead.` : alt || ''].join(' ').trim();
        this.log.deprecated(message);
        if (map) flags[map] = flags[f];
      }
    } // ensure cleanup is always performed


    let cleanup = () => this.finally(new Error('SIGTERM'));

    process.on('SIGHUP', cleanup);
    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);
  } // Log errors using the Percy logger


  async catch(err) {
    try {
      // real errors will bubble
      await super.catch(err);
    } catch (err) {
      // oclif exit method actually throws an error, let it continue
      if (err.oclif && err.code === 'EEXIT') throw err; // log all other errors and exit

      this.log.error(err);
      this.exit(1);
    }
  } // Returns true or false if Percy has not been disabled


  isPercyEnabled() {
    return process.env.PERCY_ENABLE !== '0';
  } // Parses command flags and maps them to config options according to their
  // respective `percyrc` parameter. The flag input is then merged with options
  // loaded from a config file and default config options. The PERCY_TOKEN
  // environment variable is also included as a convenience.


  percyrc(initialOverrides = {}) {
    let overrides = Object.entries(this.constructor.flags).reduce((conf, [name, flag]) => {
      if (!flag.percyrc || this.flags[name] == null) return conf;
      return (0, _utils.set)(conf, flag.percyrc, this.flags[name]);
    }, initialOverrides); // will also validate config and log warnings

    let config = _config.default.load({
      path: this.flags.config,
      overrides
    }); // set config: false to prevent core from reloading config


    return Object.assign(config, {
      skipUploads: this.flags.debug,
      dryRun: this.flags['dry-run'],
      config: false
    });
  }

}

exports.default = PercyCommand;