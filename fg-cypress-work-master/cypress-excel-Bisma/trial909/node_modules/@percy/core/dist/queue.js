"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("./utils");

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function isGenerator(obj) {
  return typeof obj.next === 'function' && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function');
}

async function runGeneratorTask(task, arg) {
  if (task.canceled) await task.generator.throw(new Error('Canceled'));
  let {
    done,
    value
  } = await task.generator.next(arg);
  return done ? value : runGeneratorTask(task, value);
}

var _queued = /*#__PURE__*/new WeakMap();

var _pending = /*#__PURE__*/new WeakMap();

class Queue {
  constructor(concurrency = 10) {
    _defineProperty(this, "running", true);

    _defineProperty(this, "closed", false);

    _classPrivateFieldInitSpec(this, _queued, {
      writable: true,
      value: new Map()
    });

    _classPrivateFieldInitSpec(this, _pending, {
      writable: true,
      value: new Map()
    });

    this.concurrency = concurrency;
  }

  push(id, callback, priority) {
    if (this.closed) throw new Error('Closed');
    this.cancel(id);
    let task = {
      id,
      callback,
      priority
    };
    task.promise = new Promise((resolve, reject) => {
      Object.assign(task, {
        resolve,
        reject
      });

      _classPrivateFieldGet(this, _queued).set(id, task);

      this._dequeue();
    });
    return task.promise;
  }

  cancel(id) {
    let pending = _classPrivateFieldGet(this, _pending).get(id);

    if (pending) pending.canceled = true;

    _classPrivateFieldGet(this, _pending).delete(id);

    _classPrivateFieldGet(this, _queued).delete(id);
  }

  clear() {
    _classPrivateFieldGet(this, _queued).clear();

    return this.size;
  }

  get size() {
    return _classPrivateFieldGet(this, _queued).size + _classPrivateFieldGet(this, _pending).size;
  }

  run() {
    this.running = true;

    while (this.running && _classPrivateFieldGet(this, _queued).size && _classPrivateFieldGet(this, _pending).size < this.concurrency) this._dequeue();

    return this;
  }

  stop() {
    this.running = false;
    return this;
  }

  close(abort) {
    if (abort) this.stop().clear();
    this.closed = true;
    return this;
  }

  async idle() {
    await (0, _utils.waitFor)(() => {
      return !_classPrivateFieldGet(this, _pending).size;
    }, {
      idle: 10
    });
  }

  async empty(onCheck) {
    await (0, _utils.waitFor)(() => {
      onCheck === null || onCheck === void 0 ? void 0 : onCheck(this.size);
      return !this.size;
    }, {
      idle: 10
    });
  }

  async flush() {
    this.push('@@/flush', () => this.stop());
    await this.run().idle();
  }

  next() {
    let next;

    for (let [id, task] of _classPrivateFieldGet(this, _queued)) {
      if (!next || task.priority != null && next.priority == null || task.priority < next.priority) next = task;
      if (id === '@@/flush') break;
    }

    return next;
  }

  _dequeue() {
    if (!this.running) return;
    if (_classPrivateFieldGet(this, _pending).size >= this.concurrency) return;
    let task = this.next();
    if (!task) return;

    _classPrivateFieldGet(this, _queued).delete(task.id);

    _classPrivateFieldGet(this, _pending).set(task.id, task);

    let done = (callback, arg) => {
      if (!task.canceled) _classPrivateFieldGet(this, _pending).delete(task.id);
      callback(arg);

      this._dequeue();
    };

    try {
      let result = task.callback();

      if (isGenerator(result)) {
        task.generator = result;
        result = runGeneratorTask(task);
      }

      return Promise.resolve(result).then(done.bind(null, task.resolve)).catch(done.bind(null, task.reject));
    } catch (err) {
      done(task.reject, err);
    }
  }

}

exports.default = Queue;